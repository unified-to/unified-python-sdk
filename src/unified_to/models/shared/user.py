"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .property_user_meta import PropertyUserMeta
from .property_user_name import PropertyUserName
from .property_user_schemas import PropertyUserSchemas
from .property_user_urn_ietf_params_scim_schemas_extension_enterprise_2_0_user import PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User
from .property_user_urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_user import PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User
from .property_user_urn_ietf_params_scim_schemas_extension_peakon_2_0_user import PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User
from .undefined import UndefinedT
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional
from unified_to import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User:
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    addresses: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    emails: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    entitlements: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entitlements'), 'exclude': lambda f: f is None }})
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    groups: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    ims: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ims'), 'exclude': lambda f: f is None }})
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    meta: Optional[PropertyUserMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    name: Optional[PropertyUserName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    nick_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickName'), 'exclude': lambda f: f is None }})
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    phone_numbers: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumbers'), 'exclude': lambda f: f is None }})
    photos: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photos'), 'exclude': lambda f: f is None }})
    preferred_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredLanguage'), 'exclude': lambda f: f is None }})
    profile_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileUrl'), 'exclude': lambda f: f is None }})
    roles: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    schemas: Optional[List[PropertyUserSchemas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'), 'exclude': lambda f: f is None }})
    urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_user: Optional[PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User'), 'exclude': lambda f: f is None }})
    urn_ietf_params_scim_schemas_extension_peakon_2_0_user: Optional[PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:peakon:2.0:User'), 'exclude': lambda f: f is None }})
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    user_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    x509_certificates: Optional[List[UndefinedT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x509Certificates'), 'exclude': lambda f: f is None }})
    

