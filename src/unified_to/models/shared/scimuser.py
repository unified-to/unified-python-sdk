"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .property_scimuser_meta import PropertyScimUserMeta
from .property_scimuser_name import PropertyScimUserName
from .property_scimuser_schemas import PropertyScimUserSchemas
from .property_scimuser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_user import PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User
from .property_scimuser_urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_user import PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User
from .property_scimuser_urn_ietf_params_scim_schemas_extension_peakon_2_0_user import PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User
from .scimaddress import ScimAddress
from .scimemail import ScimEmail
from .scimentitlement import ScimEntitlement
from .scimims import ScimIms
from .scimphonenumber import ScimPhoneNumber
from .scimphoto import ScimPhoto
from .scimrole import ScimRole
from .scimusergroups import ScimUserGroups
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional
from unified_to import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScimUser:
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    addresses: Optional[List[ScimAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    emails: Optional[List[ScimEmail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    entitlements: Optional[List[ScimEntitlement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entitlements'), 'exclude': lambda f: f is None }})
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    groups: Optional[List[ScimUserGroups]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    ims: Optional[List[ScimIms]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ims'), 'exclude': lambda f: f is None }})
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    meta: Optional[PropertyScimUserMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    name: Optional[PropertyScimUserName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    nick_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickName'), 'exclude': lambda f: f is None }})
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    phone_numbers: Optional[List[ScimPhoneNumber]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumbers'), 'exclude': lambda f: f is None }})
    photos: Optional[List[ScimPhoto]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photos'), 'exclude': lambda f: f is None }})
    preferred_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredLanguage'), 'exclude': lambda f: f is None }})
    profile_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileUrl'), 'exclude': lambda f: f is None }})
    roles: Optional[List[ScimRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""Student, Faculty, ..."""
    schemas: Optional[List[PropertyScimUserSchemas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'), 'exclude': lambda f: f is None }})
    r"""an organization."""
    urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_user: Optional[PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User'), 'exclude': lambda f: f is None }})
    urn_ietf_params_scim_schemas_extension_peakon_2_0_user: Optional[PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urn:ietf:params:scim:schemas:extension:peakon:2.0:User'), 'exclude': lambda f: f is None }})
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    user_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    x509_certificates: Optional[List[ScimRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x509Certificates'), 'exclude': lambda f: f is None }})
    

