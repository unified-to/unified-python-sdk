"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from typing import Any, List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict
from unified_python_sdk.types import BaseModel


class AtsMetadataSchemasExtraData2TypedDict(TypedDict):
    pass


class AtsMetadataSchemasExtraData2(BaseModel):
    pass


FiveTypedDict = TypeAliasType(
    "FiveTypedDict", Union[AtsMetadataSchemasExtraData2TypedDict, List[Any]]
)


Five = TypeAliasType("Five", Union[AtsMetadataSchemasExtraData2, List[Any]])


class AtsMetadataSchemas2TypedDict(TypedDict):
    pass


class AtsMetadataSchemas2(BaseModel):
    pass


FourTypedDict = TypeAliasType(
    "FourTypedDict", Union[AtsMetadataSchemas2TypedDict, bool]
)


Four = TypeAliasType("Four", Union[AtsMetadataSchemas2, bool])


class AtsMetadataSchemasExtraData32TypedDict(TypedDict):
    pass


class AtsMetadataSchemasExtraData32(BaseModel):
    pass


ThreeTypedDict = TypeAliasType(
    "ThreeTypedDict", Union[AtsMetadataSchemasExtraData32TypedDict, float]
)


Three = TypeAliasType("Three", Union[AtsMetadataSchemasExtraData32, float])


class AtsMetadataSchemasExtraData22TypedDict(TypedDict):
    pass


class AtsMetadataSchemasExtraData22(BaseModel):
    pass


TwoTypedDict = TypeAliasType(
    "TwoTypedDict", Union[AtsMetadataSchemasExtraData22TypedDict, str]
)


Two = TypeAliasType("Two", Union[AtsMetadataSchemasExtraData22, str])


class OneTypedDict(TypedDict):
    pass


class One(BaseModel):
    pass


ExtraDataTypedDict = TypeAliasType(
    "ExtraDataTypedDict",
    Union[OneTypedDict, TwoTypedDict, ThreeTypedDict, FourTypedDict, FiveTypedDict],
)


ExtraData = TypeAliasType("ExtraData", Union[One, Two, Three, Four, Five])


class AtsMetadataSchemasValue52TypedDict(TypedDict):
    pass


class AtsMetadataSchemasValue52(BaseModel):
    pass


AtsMetadata5TypedDict = TypeAliasType(
    "AtsMetadata5TypedDict", Union[AtsMetadataSchemasValue52TypedDict, List[Any]]
)


AtsMetadata5 = TypeAliasType(
    "AtsMetadata5", Union[AtsMetadataSchemasValue52, List[Any]]
)


class AtsMetadataSchemasValue42TypedDict(TypedDict):
    pass


class AtsMetadataSchemasValue42(BaseModel):
    pass


AtsMetadata4TypedDict = TypeAliasType(
    "AtsMetadata4TypedDict", Union[AtsMetadataSchemasValue42TypedDict, bool]
)


AtsMetadata4 = TypeAliasType("AtsMetadata4", Union[AtsMetadataSchemasValue42, bool])


class AtsMetadataSchemasValue32TypedDict(TypedDict):
    pass


class AtsMetadataSchemasValue32(BaseModel):
    pass


AtsMetadata3TypedDict = TypeAliasType(
    "AtsMetadata3TypedDict", Union[AtsMetadataSchemasValue32TypedDict, float]
)


AtsMetadata3 = TypeAliasType("AtsMetadata3", Union[AtsMetadataSchemasValue32, float])


class AtsMetadataSchemasValue2TypedDict(TypedDict):
    pass


class AtsMetadataSchemasValue2(BaseModel):
    pass


AtsMetadata2TypedDict = TypeAliasType(
    "AtsMetadata2TypedDict", Union[AtsMetadataSchemasValue2TypedDict, str]
)


AtsMetadata2 = TypeAliasType("AtsMetadata2", Union[AtsMetadataSchemasValue2, str])


class AtsMetadata1TypedDict(TypedDict):
    pass


class AtsMetadata1(BaseModel):
    pass


ValueTypedDict = TypeAliasType(
    "ValueTypedDict",
    Union[
        AtsMetadata1TypedDict,
        AtsMetadata2TypedDict,
        AtsMetadata3TypedDict,
        AtsMetadata4TypedDict,
        AtsMetadata5TypedDict,
    ],
)


Value = TypeAliasType(
    "Value", Union[AtsMetadata1, AtsMetadata2, AtsMetadata3, AtsMetadata4, AtsMetadata5]
)


class AtsMetadataTypedDict(TypedDict):
    extra_data: NotRequired[ExtraDataTypedDict]
    id: NotRequired[str]
    key: NotRequired[str]
    namespace: NotRequired[str]
    slug: NotRequired[str]
    type: NotRequired[str]
    value: NotRequired[ValueTypedDict]


class AtsMetadata(BaseModel):
    extra_data: Optional[ExtraData] = None

    id: Optional[str] = None

    key: Optional[str] = None

    namespace: Optional[str] = None

    slug: Optional[str] = None

    type: Optional[str] = None

    value: Optional[Value] = None
