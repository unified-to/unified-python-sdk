"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .property_integration_categories import PropertyIntegrationCategories
from .property_integration_token_instructions import (
    PropertyIntegrationTokenInstructions,
)
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict
from unified_python_sdk.types import BaseModel


class IntegrationSchemasAPI52TypedDict(TypedDict):
    pass


class IntegrationSchemasAPI52(BaseModel):
    pass


Integration5TypedDict = TypeAliasType(
    "Integration5TypedDict", Union[IntegrationSchemasAPI52TypedDict, List[Any]]
)


Integration5 = TypeAliasType("Integration5", Union[IntegrationSchemasAPI52, List[Any]])


class IntegrationSchemasAPI2TypedDict(TypedDict):
    pass


class IntegrationSchemasAPI2(BaseModel):
    pass


Integration4TypedDict = TypeAliasType(
    "Integration4TypedDict", Union[IntegrationSchemasAPI2TypedDict, bool]
)


Integration4 = TypeAliasType("Integration4", Union[IntegrationSchemasAPI2, bool])


class IntegrationSchemasAPI32TypedDict(TypedDict):
    pass


class IntegrationSchemasAPI32(BaseModel):
    pass


Integration3TypedDict = TypeAliasType(
    "Integration3TypedDict", Union[IntegrationSchemasAPI32TypedDict, float]
)


Integration3 = TypeAliasType("Integration3", Union[IntegrationSchemasAPI32, float])


class IntegrationSchemasAPI22TypedDict(TypedDict):
    pass


class IntegrationSchemasAPI22(BaseModel):
    pass


Integration2TypedDict = TypeAliasType(
    "Integration2TypedDict", Union[IntegrationSchemasAPI22TypedDict, str]
)


Integration2 = TypeAliasType("Integration2", Union[IntegrationSchemasAPI22, str])


class Integration1TypedDict(TypedDict):
    pass


class Integration1(BaseModel):
    pass


APITypedDict = TypeAliasType(
    "APITypedDict",
    Union[
        Integration1TypedDict,
        Integration2TypedDict,
        Integration3TypedDict,
        Integration4TypedDict,
        Integration5TypedDict,
    ],
)


API = TypeAliasType(
    "API", Union[Integration1, Integration2, Integration3, Integration4, Integration5]
)


class IntegrationSchemasPartnership52TypedDict(TypedDict):
    pass


class IntegrationSchemasPartnership52(BaseModel):
    pass


IntegrationSchemas5TypedDict = TypeAliasType(
    "IntegrationSchemas5TypedDict",
    Union[IntegrationSchemasPartnership52TypedDict, List[Any]],
)


IntegrationSchemas5 = TypeAliasType(
    "IntegrationSchemas5", Union[IntegrationSchemasPartnership52, List[Any]]
)


class IntegrationSchemasPartnership42TypedDict(TypedDict):
    pass


class IntegrationSchemasPartnership42(BaseModel):
    pass


IntegrationSchemas4TypedDict = TypeAliasType(
    "IntegrationSchemas4TypedDict",
    Union[IntegrationSchemasPartnership42TypedDict, bool],
)


IntegrationSchemas4 = TypeAliasType(
    "IntegrationSchemas4", Union[IntegrationSchemasPartnership42, bool]
)


class IntegrationSchemasPartnership32TypedDict(TypedDict):
    pass


class IntegrationSchemasPartnership32(BaseModel):
    pass


IntegrationSchemas3TypedDict = TypeAliasType(
    "IntegrationSchemas3TypedDict",
    Union[IntegrationSchemasPartnership32TypedDict, float],
)


IntegrationSchemas3 = TypeAliasType(
    "IntegrationSchemas3", Union[IntegrationSchemasPartnership32, float]
)


class IntegrationSchemasPartnership2TypedDict(TypedDict):
    pass


class IntegrationSchemasPartnership2(BaseModel):
    pass


IntegrationSchemas2TypedDict = TypeAliasType(
    "IntegrationSchemas2TypedDict", Union[IntegrationSchemasPartnership2TypedDict, str]
)


IntegrationSchemas2 = TypeAliasType(
    "IntegrationSchemas2", Union[IntegrationSchemasPartnership2, str]
)


class IntegrationSchemas1TypedDict(TypedDict):
    pass


class IntegrationSchemas1(BaseModel):
    pass


PartnershipTypedDict = TypeAliasType(
    "PartnershipTypedDict",
    Union[
        IntegrationSchemas1TypedDict,
        IntegrationSchemas2TypedDict,
        IntegrationSchemas3TypedDict,
        IntegrationSchemas4TypedDict,
        IntegrationSchemas5TypedDict,
    ],
)


Partnership = TypeAliasType(
    "Partnership",
    Union[
        IntegrationSchemas1,
        IntegrationSchemas2,
        IntegrationSchemas3,
        IntegrationSchemas4,
        IntegrationSchemas5,
    ],
)


class IntegrationSchemasSandbox52TypedDict(TypedDict):
    pass


class IntegrationSchemasSandbox52(BaseModel):
    pass


IntegrationSchemasSandbox5TypedDict = TypeAliasType(
    "IntegrationSchemasSandbox5TypedDict",
    Union[IntegrationSchemasSandbox52TypedDict, List[Any]],
)


IntegrationSchemasSandbox5 = TypeAliasType(
    "IntegrationSchemasSandbox5", Union[IntegrationSchemasSandbox52, List[Any]]
)


class IntegrationSchemasSandbox42TypedDict(TypedDict):
    pass


class IntegrationSchemasSandbox42(BaseModel):
    pass


IntegrationSchemasSandbox4TypedDict = TypeAliasType(
    "IntegrationSchemasSandbox4TypedDict",
    Union[IntegrationSchemasSandbox42TypedDict, bool],
)


IntegrationSchemasSandbox4 = TypeAliasType(
    "IntegrationSchemasSandbox4", Union[IntegrationSchemasSandbox42, bool]
)


class IntegrationSchemasSandbox32TypedDict(TypedDict):
    pass


class IntegrationSchemasSandbox32(BaseModel):
    pass


IntegrationSchemasSandbox3TypedDict = TypeAliasType(
    "IntegrationSchemasSandbox3TypedDict",
    Union[IntegrationSchemasSandbox32TypedDict, float],
)


IntegrationSchemasSandbox3 = TypeAliasType(
    "IntegrationSchemasSandbox3", Union[IntegrationSchemasSandbox32, float]
)


class IntegrationSchemasSandbox22TypedDict(TypedDict):
    pass


class IntegrationSchemasSandbox22(BaseModel):
    pass


IntegrationSchemasSandbox2TypedDict = TypeAliasType(
    "IntegrationSchemasSandbox2TypedDict",
    Union[IntegrationSchemasSandbox22TypedDict, str],
)


IntegrationSchemasSandbox2 = TypeAliasType(
    "IntegrationSchemasSandbox2", Union[IntegrationSchemasSandbox22, str]
)


class IntegrationSchemasSandbox1TypedDict(TypedDict):
    pass


class IntegrationSchemasSandbox1(BaseModel):
    pass


SandboxTypedDict = TypeAliasType(
    "SandboxTypedDict",
    Union[
        IntegrationSchemasSandbox1TypedDict,
        IntegrationSchemasSandbox2TypedDict,
        IntegrationSchemasSandbox3TypedDict,
        IntegrationSchemasSandbox4TypedDict,
        IntegrationSchemasSandbox5TypedDict,
    ],
)


Sandbox = TypeAliasType(
    "Sandbox",
    Union[
        IntegrationSchemasSandbox1,
        IntegrationSchemasSandbox2,
        IntegrationSchemasSandbox3,
        IntegrationSchemasSandbox4,
        IntegrationSchemasSandbox5,
    ],
)


class IntegrationTypedDict(TypedDict):
    r"""Informational object for supported integrations."""

    categories: List[PropertyIntegrationCategories]
    r"""The categories of support solutions that this integration has"""
    name: str
    type: str
    active_healthy_connections: NotRequired[float]
    api: NotRequired[APITypedDict]
    api_docs_url: NotRequired[str]
    beta: NotRequired[bool]
    color: NotRequired[str]
    created_at: NotRequired[str]
    description: NotRequired[str]
    fa_icon: NotRequired[str]
    featured: NotRequired[bool]
    in_progress: NotRequired[bool]
    is_active: NotRequired[bool]
    logo_url: NotRequired[str]
    partnership: NotRequired[PartnershipTypedDict]
    popularity: NotRequired[float]
    rate_limit_description: NotRequired[str]
    sandbox: NotRequired[SandboxTypedDict]
    support: NotRequired[Dict[str, Any]]
    tested_at: NotRequired[datetime]
    text_color: NotRequired[str]
    token_instructions: NotRequired[List[PropertyIntegrationTokenInstructions]]
    r"""instructions for the user on how to find the token/key"""
    token_names: NotRequired[List[str]]
    r"""if auth_types = 'token'"""
    updated_at: NotRequired[str]
    web_url: NotRequired[str]


class Integration(BaseModel):
    r"""Informational object for supported integrations."""

    categories: List[PropertyIntegrationCategories]
    r"""The categories of support solutions that this integration has"""

    name: str

    type: str

    active_healthy_connections: Optional[float] = None

    api: Optional[API] = None

    api_docs_url: Optional[str] = None

    beta: Optional[bool] = None

    color: Optional[str] = None

    created_at: Optional[str] = None

    description: Optional[str] = None

    fa_icon: Optional[str] = None

    featured: Optional[bool] = None

    in_progress: Optional[bool] = None

    is_active: Optional[bool] = None

    logo_url: Optional[str] = None

    partnership: Optional[Partnership] = None

    popularity: Optional[float] = None

    rate_limit_description: Optional[str] = None

    sandbox: Optional[Sandbox] = None

    support: Optional[Dict[str, Any]] = None

    tested_at: Optional[datetime] = None

    text_color: Optional[str] = None

    token_instructions: Optional[List[PropertyIntegrationTokenInstructions]] = None
    r"""instructions for the user on how to find the token/key"""

    token_names: Optional[List[str]] = None
    r"""if auth_types = 'token'"""

    updated_at: Optional[str] = None

    web_url: Optional[str] = None
