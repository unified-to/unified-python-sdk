"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict
from unified_python_sdk import utils
from unified_python_sdk.types import BaseModel
from unified_python_sdk.utils import validate_open_enum


class CommerceMetadata1TypedDict(TypedDict):
    pass


class CommerceMetadata1(BaseModel):
    pass


CommerceMetadata5TypedDict = TypeAliasType(
    "CommerceMetadata5TypedDict", Union[CommerceMetadata1TypedDict, str, float, bool]
)


CommerceMetadata5 = TypeAliasType(
    "CommerceMetadata5", Union[CommerceMetadata1, str, float, bool]
)


CommerceMetadataExtraDataTypedDict = TypeAliasType(
    "CommerceMetadataExtraDataTypedDict",
    Union[Dict[str, Any], str, float, bool, List[CommerceMetadata5TypedDict]],
)


CommerceMetadataExtraData = TypeAliasType(
    "CommerceMetadataExtraData",
    Union[Dict[str, Any], str, float, bool, List[CommerceMetadata5]],
)


class CommerceMetadataFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    DATE = "DATE"
    BOOLEAN = "BOOLEAN"
    FILE = "FILE"
    TEXTAREA = "TEXTAREA"
    SINGLE_SELECT = "SINGLE_SELECT"
    MULTIPLE_SELECT = "MULTIPLE_SELECT"
    MEASUREMENT = "MEASUREMENT"
    PRICE = "PRICE"
    YES_NO = "YES_NO"
    CURRENCY = "CURRENCY"
    URL = "URL"


class CommerceMetadataSchemas1TypedDict(TypedDict):
    pass


class CommerceMetadataSchemas1(BaseModel):
    pass


CommerceMetadataSchemas5TypedDict = TypeAliasType(
    "CommerceMetadataSchemas5TypedDict",
    Union[CommerceMetadataSchemas1TypedDict, str, float, bool],
)


CommerceMetadataSchemas5 = TypeAliasType(
    "CommerceMetadataSchemas5", Union[CommerceMetadataSchemas1, str, float, bool]
)


CommerceMetadataValueTypedDict = TypeAliasType(
    "CommerceMetadataValueTypedDict",
    Union[Dict[str, Any], str, float, bool, List[CommerceMetadataSchemas5TypedDict]],
)


CommerceMetadataValue = TypeAliasType(
    "CommerceMetadataValue",
    Union[Dict[str, Any], str, float, bool, List[CommerceMetadataSchemas5]],
)


class CommerceMetadataTypedDict(TypedDict):
    extra_data: NotRequired[CommerceMetadataExtraDataTypedDict]
    format_: NotRequired[CommerceMetadataFormat]
    id: NotRequired[str]
    key: NotRequired[str]
    namespace: NotRequired[str]
    slug: NotRequired[str]
    type: NotRequired[str]
    value: NotRequired[CommerceMetadataValueTypedDict]


class CommerceMetadata(BaseModel):
    extra_data: Optional[CommerceMetadataExtraData] = None

    format_: Annotated[
        Annotated[
            Optional[CommerceMetadataFormat], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="format"),
    ] = None

    id: Optional[str] = None

    key: Optional[str] = None

    namespace: Optional[str] = None

    slug: Optional[str] = None

    type: Optional[str] = None

    value: Optional[CommerceMetadataValue] = None
