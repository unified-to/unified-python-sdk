"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict
from unified_python_sdk import utils
from unified_python_sdk.types import BaseModel
from unified_python_sdk.utils import validate_open_enum


class TaskMetadataSchemasExtraData52TypedDict(TypedDict):
    pass


class TaskMetadataSchemasExtraData52(BaseModel):
    pass


TaskMetadata5TypedDict = TypeAliasType(
    "TaskMetadata5TypedDict", Union[TaskMetadataSchemasExtraData52TypedDict, List[Any]]
)


TaskMetadata5 = TypeAliasType(
    "TaskMetadata5", Union[TaskMetadataSchemasExtraData52, List[Any]]
)


class TaskMetadataSchemasExtraData2TypedDict(TypedDict):
    pass


class TaskMetadataSchemasExtraData2(BaseModel):
    pass


TaskMetadata4TypedDict = TypeAliasType(
    "TaskMetadata4TypedDict", Union[TaskMetadataSchemasExtraData2TypedDict, bool]
)


TaskMetadata4 = TypeAliasType(
    "TaskMetadata4", Union[TaskMetadataSchemasExtraData2, bool]
)


class TaskMetadataSchemasExtraData32TypedDict(TypedDict):
    pass


class TaskMetadataSchemasExtraData32(BaseModel):
    pass


TaskMetadata3TypedDict = TypeAliasType(
    "TaskMetadata3TypedDict", Union[TaskMetadataSchemasExtraData32TypedDict, float]
)


TaskMetadata3 = TypeAliasType(
    "TaskMetadata3", Union[TaskMetadataSchemasExtraData32, float]
)


class TaskMetadataSchemasExtraData22TypedDict(TypedDict):
    pass


class TaskMetadataSchemasExtraData22(BaseModel):
    pass


TaskMetadata2TypedDict = TypeAliasType(
    "TaskMetadata2TypedDict", Union[TaskMetadataSchemasExtraData22TypedDict, str]
)


TaskMetadata2 = TypeAliasType(
    "TaskMetadata2", Union[TaskMetadataSchemasExtraData22, str]
)


class TaskMetadata1TypedDict(TypedDict):
    pass


class TaskMetadata1(BaseModel):
    pass


TaskMetadataExtraDataTypedDict = TypeAliasType(
    "TaskMetadataExtraDataTypedDict",
    Union[
        TaskMetadata1TypedDict,
        TaskMetadata2TypedDict,
        TaskMetadata3TypedDict,
        TaskMetadata4TypedDict,
        TaskMetadata5TypedDict,
    ],
)


TaskMetadataExtraData = TypeAliasType(
    "TaskMetadataExtraData",
    Union[TaskMetadata1, TaskMetadata2, TaskMetadata3, TaskMetadata4, TaskMetadata5],
)


class TaskMetadataFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    DATE = "DATE"
    BOOLEAN = "BOOLEAN"
    FILE = "FILE"
    TEXTAREA = "TEXTAREA"
    SINGLE_SELECT = "SINGLE_SELECT"
    MULTIPLE_SELECT = "MULTIPLE_SELECT"
    MEASUREMENT = "MEASUREMENT"
    PRICE = "PRICE"
    YES_NO = "YES_NO"
    CURRENCY = "CURRENCY"
    URL = "URL"


class TaskMetadataSchemasValue52TypedDict(TypedDict):
    pass


class TaskMetadataSchemasValue52(BaseModel):
    pass


TaskMetadataSchemas5TypedDict = TypeAliasType(
    "TaskMetadataSchemas5TypedDict",
    Union[TaskMetadataSchemasValue52TypedDict, List[Any]],
)


TaskMetadataSchemas5 = TypeAliasType(
    "TaskMetadataSchemas5", Union[TaskMetadataSchemasValue52, List[Any]]
)


class TaskMetadataSchemasValue42TypedDict(TypedDict):
    pass


class TaskMetadataSchemasValue42(BaseModel):
    pass


TaskMetadataSchemas4TypedDict = TypeAliasType(
    "TaskMetadataSchemas4TypedDict", Union[TaskMetadataSchemasValue42TypedDict, bool]
)


TaskMetadataSchemas4 = TypeAliasType(
    "TaskMetadataSchemas4", Union[TaskMetadataSchemasValue42, bool]
)


class TaskMetadataSchemasValue32TypedDict(TypedDict):
    pass


class TaskMetadataSchemasValue32(BaseModel):
    pass


TaskMetadataSchemas3TypedDict = TypeAliasType(
    "TaskMetadataSchemas3TypedDict", Union[TaskMetadataSchemasValue32TypedDict, float]
)


TaskMetadataSchemas3 = TypeAliasType(
    "TaskMetadataSchemas3", Union[TaskMetadataSchemasValue32, float]
)


class TaskMetadataSchemasValue2TypedDict(TypedDict):
    pass


class TaskMetadataSchemasValue2(BaseModel):
    pass


TaskMetadataSchemas2TypedDict = TypeAliasType(
    "TaskMetadataSchemas2TypedDict", Union[TaskMetadataSchemasValue2TypedDict, str]
)


TaskMetadataSchemas2 = TypeAliasType(
    "TaskMetadataSchemas2", Union[TaskMetadataSchemasValue2, str]
)


class TaskMetadataSchemas1TypedDict(TypedDict):
    pass


class TaskMetadataSchemas1(BaseModel):
    pass


TaskMetadataValueTypedDict = TypeAliasType(
    "TaskMetadataValueTypedDict",
    Union[
        TaskMetadataSchemas1TypedDict,
        TaskMetadataSchemas2TypedDict,
        TaskMetadataSchemas3TypedDict,
        TaskMetadataSchemas4TypedDict,
        TaskMetadataSchemas5TypedDict,
    ],
)


TaskMetadataValue = TypeAliasType(
    "TaskMetadataValue",
    Union[
        TaskMetadataSchemas1,
        TaskMetadataSchemas2,
        TaskMetadataSchemas3,
        TaskMetadataSchemas4,
        TaskMetadataSchemas5,
    ],
)


class TaskMetadataTypedDict(TypedDict):
    extra_data: NotRequired[TaskMetadataExtraDataTypedDict]
    format_: NotRequired[TaskMetadataFormat]
    id: NotRequired[str]
    key: NotRequired[str]
    namespace: NotRequired[str]
    slug: NotRequired[str]
    type: NotRequired[str]
    value: NotRequired[TaskMetadataValueTypedDict]


class TaskMetadata(BaseModel):
    extra_data: Optional[TaskMetadataExtraData] = None

    format_: Annotated[
        Annotated[
            Optional[TaskMetadataFormat], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="format"),
    ] = None

    id: Optional[str] = None

    key: Optional[str] = None

    namespace: Optional[str] = None

    slug: Optional[str] = None

    type: Optional[str] = None

    value: Optional[TaskMetadataValue] = None
